{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "",
	"Metadata": {

	},
	"Parameters": {
		"nvvpccidr": {
			"Description": "Choose CIDR for VPC",
			"Type": "String",
			"Default": "192.168.0.0/16"
		},
		"subnet1cidr": {
			"Description": "Choose CIDR for SUBNet1",
			"Type": "String",
			"Default": "192.168.1.0/24"

		},
		"subnet2cidr": {
			"Description": "Choose CIDR for SUBNet2",
			"Type": "String",
			"Default": "192.168.2.0/24"

		},

		"Subnet1AZs": {
			"Description": "Choose AZ for Subnet1",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"Subnet2AZs": {
			"Description": "Choose AZ for Subnet2",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},

		"Key": {
			"Description": "Choose Key Name",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"InstanceType": {
			"Description": "Choose Instance Type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": ["t2.micro", "t2.nano", "t2.small"]

		}
			},
	"Mappings": {
		"RegionMap": {
			"us-east-1": {
				"64": "ami-0d5eff06f840b45e9"
			},
			"us-east-2": {
				"64": "ami-077e31c4939f6a2f3"
			},
			"ap-south-1": {
				"64": "ami-010aff33ed5991201"
			}
		}
	},
	"Conditions": {

	},
	"Resources": {
		"cloudVPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"EnableDnsHostnames": true,
				"EnableDnsSupport": true,
				"CidrBlock": {
					"Ref": "nvvpccidr"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "cloudVPC"
				}]
			}
		},
		"sub1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"MapPublicIpOnLaunch": true,
				"AvailabilityZone": {
					"Ref": "Subnet1AZs"
				},
				"VpcId": {
					"Ref": "cloudVPC"
				},
				"CidrBlock": {
					"Ref": "subnet1cidr"
				},
				"Tags": [{
					"Key": "name",
					"Value": "sub1"
				}]
			}
		},
		"sub2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"MapPublicIpOnLaunch": true,
				"AvailabilityZone": {
					"Ref": "Subnet2AZs"
				},
				"VpcId": {
					"Ref": "cloudVPC"
				},
				"CidrBlock": {
					"Ref": "subnet2cidr"
				},
				"Tags": [{
					"Key": "name",
					"Value": "sub2"
				}]
			}
		},
		"cloudigw": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "name",
					"Value": "cloudvpcigw"
				}]
			}
		},
		"AttachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "cloudVPC"
				},
				"InternetGatewayId": {
					"Ref": "cloudigw"
				}

			}
		},
		"PublicRT": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "cloudVPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "PublicRT"
				}]
			}
		},
		"routeigw": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRT"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "cloudigw"
				}
			}
		},
		"sub1routeTableAssoc": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "sub1"
				},
				"RouteTableId": {
					"Ref": "PublicRT"
				}
			}
		},
		"sub2routeTableAssoc": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "sub2"
				},
				"RouteTableId": {
					"Ref": "PublicRT"
				}
			}
		},
		"WebserverSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "WebserverSG",
				"GroupDescription": "SG for ssh http traffic",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"VpcId": {
					"Ref": "cloudVPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "sgforweb"
				}]
			}
		},
		"ELBSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "ELBSG",
				"GroupDescription": "SG for ELB traffic",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"VpcId": {
					"Ref": "cloudVPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "ELBSG"
				}]
			}
		},
		"Webserver1": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"KeyName": {
					"Ref": "Key"
				},
				"SubnetId": {
					"Ref": "sub1"
				},
				"ImageId": {
					"Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"Monitoring": "false",
				"SecurityGroupIds": [{
					"Ref": "WebserverSG"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "Webserver 1"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -ex \n",
								"yum install httpd git -y \n",
								"systemctl enable httpd \n",
								"systemctl start httpd \n",
								"git clone https://github.com/keyspaceits/project-html-blue-website.git /var/www/html"
							]
						]
					}
				}
			}
		},
		"Webserver2": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"KeyName": {
					"Ref": "Key"
				},
				"SubnetId": {
					"Ref": "sub2"
				},
				"ImageId": {
					"Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"Monitoring": "false",
				"SecurityGroupIds": [{
					"Ref": "WebserverSG"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "Webserver 2"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -ex \n",
								"yum install httpd git -y \n",
								"systemctl enable httpd \n",
								"systemctl start httpd \n",
								"git clone https://github.com/keyspaceits/sampleweb.git /var/www/html"
							]
						]
					}
				}
			}
		},
 "ALB": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
						"SecurityGroups": [{
					"Ref": "ELBSG"
				}],
				"Subnets": [{
					"Ref": "sub1"
				}, {
					"Ref": "sub2"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "ALB"
				}]
			}
		},
"ALBTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 10,
				"HealthCheckTimeoutSeconds": 5,
				"HealthyThresholdCount": 2,
				"Port": 80,
				"Protocol": "HTTP",
				"UnhealthyThresholdCount": 5,
				"VpcId": {
					"Ref": "cloudVPC"
				},
				"Targets": [{
						"Id": {
							"Ref": "Webserver1"
						},
						"Port": 80
					},
					{
						"Id": {
							"Ref": "Webserver2"
						},
						"Port": 80
					}
				]
			}
		},
"ALBListenerhttp": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions" : [{
					"Type" : "redirect",
					"RedirectConfig" : {
					"Host" : "#{host}",
					"Path" : "/#{path}",
					"Port" : 443,
					"Protocol" : "HTTPS",
					"Query" : "#{query}",
					"StatusCode" : "HTTP_301"
}
}],
					"LoadBalancerArn": {
							"Ref": "ALB"
						},
						"Port": 80,
						"Protocol" : "HTTP"
					}
				},
"ALBListenerssl":{
					"Type": "AWS::ElasticLoadBalancingV2::Listener",
					"Properties": {
					"SslPolicy": "ELBSecurityPolicy-FS-1-2-2019-08",
					"Certificates": [ {"CertificateArn": "arn:aws:acm:us-east-1:695895706089:certificate/b23b8b0f-847f-43e3-8aeb-322af3f79b36"}],
					"DefaultActions": [
					{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "ALBTargetGroup"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "ALB"
				},
				"Port": 443,
				"Protocol": "HTTPS"
			}
		},
	"abhinavblog": {
	"Type": "AWS::Route53::HostedZone",
	"Properties": {
		"Name": "abhinavblog.ga.",
				"HostedZoneConfig": {"Comment" : "Managed by Cloud Formation" },
		"HostedZoneTags": [{ "Key": "name", "Value":  "abhinavblog.ga" }]
	}
},
"MyAppDNS": {
	"Type": "AWS::Route53::RecordSetGroup",
	"Properties": {
		"HostedZoneName": "abhinavblog.ga.",
		"Comment": "Zone apex alias targeted to myELB LoadBalancer.",
		"RecordSets": [
			{
				"Name": "abhinavblog.ga.",
				"Type": "A",
				"AliasTarget": {
					"HostedZoneId": { "Fn::GetAtt" : ["ALB", "CanonicalHostedZoneID"] },
					"DNSName" : { "Fn::GetAtt" : ["ALB","DNSName"] } } } ] }

				},
				"MyAppLaunchConfiguration": {
		      "Type": "AWS::AutoScaling::LaunchConfiguration",
		      "Properties": {
		        "LaunchConfigurationName": "MyAppLaunchConfiguration",
		        "ImageId": {
		          "Fn::FindInMap": [
		            "RegionMap",
		            {
		              "Ref": "AWS::Region"
		            },
		            "64"
		          ]
		        },
		        "InstanceType": {
		          "Ref": "InstanceType"
		        },
		        "KeyName": {
		          "Ref": "Key"
		        },
		        "SecurityGroups": [
		          {
		            "Ref": "WebserverSG"
		          }
		        ],
						"UserData": {
		          "Fn::Base64": {
		            "Fn::Join": [
		              "",
		              [
		                "#!/bin/bash -ex \n",
		                "yum install httpd -y \n",
		                "chkconfig httpd on \n",
		                "echo '<h1>Deployed by CloudFormation </h1>' > /var/www/html/index.html \n",
		                "service httpd start"
		              ]
		            ]
		          }
		        }
		      }
		    },
		    "MyAppAutoScalingGroup": {
		      "Type": "AWS::AutoScaling::AutoScalingGroup",
		      "Properties": {
		        "LaunchConfigurationName": {
		          "Ref": "MyAppLaunchConfiguration"
		        },
		        "VPCZoneIdentifier": [
		          {
		            "Ref": "sub1"
		          },
		          {
		            "Ref": "sub2"
		          }
		        ],
		        "MinSize": "1",
		        "MaxSize": "2",
		        "LoadBalancerNames": [
		          {
		            "Ref": "ALB"
		          }
		        ],
		        "Tags": [
		          {
		            "Key": "Name",
		            "Value": "MyAppLaunchConfiguration",
		            "PropagateAtLaunch": "true"
		          }
		        ]
		      }
		    },
		    "WebServerScaleUpPolicy": {
		      "Type": "AWS::AutoScaling::ScalingPolicy",
		      "Properties": {
		        "AdjustmentType": "PercentChangeInCapacity",
		        "AutoScalingGroupName": {
		          "Ref": "MyAppAutoScalingGroup"
		        },
		        "Cooldown": "20",
		        "ScalingAdjustment": "1"
		      }
		    },
		    "WebServerScaleDownPolicy": {
		      "Type": "AWS::AutoScaling::ScalingPolicy",
		      "Properties": {
		        "AdjustmentType": "ChangeInCapacity",
		        "AutoScalingGroupName": {
		          "Ref": "MyAppAutoScalingGroup"
		        },
		        "Cooldown": "20",
		        "ScalingAdjustment": "-1"
		      }
		    },
		    "CPUAlarmHigh": {
		      "Type": "AWS::CloudWatch::Alarm",
		      "Properties": {
		        "AlarmDescription": "Scale-up if CPU > 40% for 1 minutes",
		        "MetricName": "CPUUtilization",
		        "Namespace": "AWS/EC2",
		        "Statistic": "Average",
		        "Period": "60",
		        "EvaluationPeriods": "1",
		        "Threshold": "40",
		        "AlarmActions": [
		          {
		            "Ref": "WebServerScaleUpPolicy"
		          }
		        ],
		        "Dimensions": [
		          {
		            "Name": "AutoScalingGroupName",
		            "Value": {
		              "Ref": "MyAppAutoScalingGroup"
		            }
		          }
		        ],
		        "ComparisonOperator": "GreaterThanThreshold"
		      }
		    },
		    "CPUAlarmLow": {
		      "Type": "AWS::CloudWatch::Alarm",
		      "Properties": {
		        "AlarmDescription": "Scale-down if CPU <20% for 1 min",
		        "MetricName": "CPUUtilization",
		        "Namespace": "AWS/EC2",
		        "Statistic": "Average",
		        "Period": "60",
		        "EvaluationPeriods": "1",
		        "Threshold": "20",
		        "AlarmActions": [
		          {
		            "Ref": "WebServerScaleDownPolicy"
		          }
		        ],
		        "Dimensions": [
		          {
		            "Name": "AutoScalingGroupName",
		            "Value": {
		              "Ref": "MyAppAutoScalingGroup"
		            }
		          }
		        ],
		        "ComparisonOperator": "LessThanThreshold"
		      }
		    }
			},
	"Outputs": {

	}
}
